@inject OpenTriviaDbService OpenTriviaDbService
@inject ILocalStorageService LocalStorage

@page "/game/{CategoryId}"

<section id="start" className="text-white text-center mb-5 container">
    <SfCard ID="BasicCard">
        <CardHeader Title=@category />
        <CardContent>
            <SfSpinner Size="40" Type="SpinnerType.Material" @bind-Visible="loading" />
            @if (!loading)
            {
                <h4>@stats</h4>
            }
            @if (!loading && question is not null && answers is not null)
            {
                <p>@((MarkupString)question.QuestionText)</p>
                @foreach (string? answer in answers)
                {
                    <SfRadioButton Name="question" Value="@answer" @bind-Checked="checkedValue"></SfRadioButton>@((MarkupString)answer)<br />
                }
            }
        </CardContent>
        <CardFooter>
            <CardFooterContent>
                <SfButton CssClass="e-btn e-outline e-primary" Disabled="@(string.IsNullOrEmpty(checkedValue))" @onclick="NextQuestion">Submit Answer</SfButton>
            </CardFooterContent>
        </CardFooter>
    </SfCard>
</section>

<style>
    .e-card-header-title {
        font-size: 40px !important;
        font-style: italic;
    }
</style>

@code {
    [Parameter]
    public string CategoryId { get; set; } = string.Empty;
    private string category = string.Empty;
    private string stats = "Question 1/10 - Your score: 0";
    private int score = 0;

    private Question[] questions = Array.Empty<Question>();
    private bool loading = true;
    private string checkedValue = string.Empty;
    private List<TriviaCategory> TriviaCategories { get; set; } = new();
    private Question? question = null;
    private List<string>? answers = null;

    protected override async Task OnInitializedAsync()
    {
        // check session id
        string sessionId = await LocalStorage.GetItemAsStringAsync("sessionId");
        if (string.IsNullOrEmpty(sessionId))
        {
            await this.OpenTriviaDbService.CreateSessionTokenAsync();
            sessionId = this.OpenTriviaDbService.SessionToken;
            await LocalStorage.SetItemAsStringAsync("sessionId", sessionId);
        }
        else
        {
            this.OpenTriviaDbService.SetSessionToken(sessionId);
        }

        string cachedTriviaCategories = await LocalStorage.GetItemAsStringAsync("triviaCategories");
        if (!string.IsNullOrEmpty(cachedTriviaCategories))
        {
            TriviaCategories = JsonConvert.DeserializeObject<List<TriviaCategory>>(cachedTriviaCategories) ?? new List<TriviaCategory>();
            category = TriviaCategories.FirstOrDefault(x => x.Id == CategoryId)?.Name ?? string.Empty;
        }

        // get 10 questions
        this.questions = await this.OpenTriviaDbService.GetQuestionsAsync(10, Convert.ToInt16(CategoryId), OpenTriviaDbEnums.QuestionType.MultiChoice, OpenTriviaDbEnums.Difficulty.Easy);
        /*
         * TODO:
         * - if no questions then suggest new category
         * - read unanswered questions from localstorage
         * - get new questions if not enough unanswered questions (10)
         * - store in localstorage unanswered questions
         */
        this.question = this.questions.FirstOrDefault() ?? new Question();
        this.answers = GetAnswers(this.question);
    
        // spinner
        this.loading = false;
    }

    private List<string> GetAnswers(Question questionToBeAnswered)
    {
        if (questionToBeAnswered.CorrectAnswer is null)
        {
            return new List<string>();
        }
        
        List<string> answersToBeShuffled = new() { questionToBeAnswered.CorrectAnswer };
        answersToBeShuffled.AddRange(questionToBeAnswered.IncorrectAnswers);
        answersToBeShuffled.Shuffle();
        return answersToBeShuffled;
    }

    private void NextQuestion()
    {
        /*
         * TODO:
         * - store in localstorage unanswered questions
         * - store all-time record for category
         * - at end of game hide submit button and add "Play again" button for this category or pick new category
         */

        // check answer
        if (this.question.CorrectAnswer == this.checkedValue)
        {
            // update score
            this.score++;
        }

        // get next question
        if (this.questions.Length == 1)
        {
            // end game
            // NavigationManager.NavigateTo($"/end/{CategoryId}/{score}");
            this.question = null;
            this.stats = $"Your score: {this.score}/10";
        }
        else
        {
            this.question = this.questions[1];
            this.answers = GetAnswers(this.question);
            this.questions = this.questions.Skip(1).ToArray();
            this.stats = $"Question {10 - this.questions.Length + 1}/10 - Your score: {this.score}";
        }

        this.checkedValue = string.Empty;
    }
}
